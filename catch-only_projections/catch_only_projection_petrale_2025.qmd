---
title: "Catch only projection for petrale sole"
author: "Ian G. Taylor" 
affiliation: 'NOAA Fisheries Northwest Fisheries Science Center, 2725 Montlake Blvd E, Seattle, WA 98112'
date: today
format: 
  pdf:
    template: catch_only_projection_template.tex
params:
  species: "petrale sole"
  assess_year: 2023
  current_year: 2025
  final_proj_year: 2036
  category: 1
  sigma: 0.50
  p_star: 0.45
  spawn_output_decimals: 2
---


```{r}
#| label: parameters
#| echo: false
#| warning: false
#| message: false
species <- params$species
Species <- stringr::str_to_sentence(params$species)
assess_year <- params$assess_year
current_year <- params$current_year
final_proj_year <- params$final_proj_year
category <- params$category
sigma <- params$sigma
p_star <- params$p_star
spawn_output_decimals <- params$spawn_output_decimals

# original model
model_original <- r4ss::SS_output(
    dir = "../models/2023.a034.920_base_Pstar45",
    verbose = FALSE,
    printstats = FALSE,
    hidewarn = TRUE
)

# catch-only projection
model <- r4ss::SS_output(
    dir = "standard", # this is the directory where I ran the standard Catch-only projection model
    verbose = FALSE,
    printstats = FALSE,
    hidewarn = TRUE
)

```

This document details a catch-only projection for `r species`. The most recent assessment for `r species` was conducted in `r assess_year`. This analysis updates catches between `r assess_year` - `r current_year` to the removals by year from the Groundfish Multiyear Mortality (GEMM) report. The removals for `r current_year` and `r current_year + 1` were set equal to mortality projections provided by the Groundfish Management Team (GMT) for each fleet in the model. For years `r current_year + 2` and beyond, removals were set equal to the projected Annual Catch Limit (ACL) based on a category `r category` time-varying $\sigma$ of `r sigma` and a P* value of `r p_star`. These buffers are the same as in the previous stock assessment, with two additional years of buffers for years `r current_year + 10` and `r current_year + 11`. 

```{r}
#| label: calc-table
#| echo: false
#| warning: false
#| message: false

# define ranges of years to get values
all_years <- assess_year:final_proj_year
proj_years <- (current_year + 2):final_proj_year
catch_years <- assess_year:(current_year + 1)

# function to get model outputs
catch_only_projection_table <- function(model, all_years, proj_years, catch_years) {
    # get realized catch from model output
    catch <- model$derived_quants |>
        dplyr::filter(Label %in% paste0("ForeCatch_", catch_years)) |>
        dplyr::summarise(
            Year = stringr::str_extract(Label, "\\d+") |> as.numeric(),
            Catch = Value
        )
    ofl <- model$derived_quants |>
        dplyr::filter(Label %in% paste0("OFLCatch_", proj_years)) |>
        dplyr::summarise(
            Year = stringr::str_extract(Label, "\\d+") |> as.numeric(),
            OFL = Value
        )
    acl <- model$derived_quants |>
        dplyr::filter(Label %in% paste0("ForeCatch_", proj_years)) |>
        dplyr::summarise(
            Year = stringr::str_extract(Label, "\\d+") |> as.numeric(),
            ACL = Value
        )
    sb <- model$derived_quants |>
        dplyr::filter(Label %in% paste0("SSB_", all_years)) |>
        dplyr::summarise(
            Year = stringr::str_extract(Label, "\\d+") |> as.numeric(),
            SB = Value
        )
    status <- model$derived_quants |>
        dplyr::filter(Label %in% paste0("Bratio_", all_years)) |>
        dplyr::summarise(
            Year = stringr::str_extract(Label, "\\d+") |> as.numeric(),
            status = round(Value, 3)
        )

    # get buffer from PEPtools function
    Buffer <- PEPtools::get_buffer(
        years = all_years, sigma = sigma, pstar = p_star,
        verbose = FALSE
    ) |> dplyr::rename(Year = year, Buffer = buffer) |> 
    dplyr::filter(Year %in% proj_years)

    # combine all the tables above (joined by year)
    table <- purrr::reduce(
        list(ofl, Buffer, acl, sb, status, catch),
        dplyr::full_join
    ) |>
        dplyr::arrange(Year) |>
        dplyr::relocate(Catch, .after = Year) |>
        dplyr::mutate(
            Buffer_from_ratio = dplyr::case_when(
                status >= model$btarg ~ round(ACL / OFL, 3),
                .default = NA # ratio doesn't work for years with 40-10 adjustment
            ),
            .after = Buffer
        ) |>
        dplyr::mutate(
            ABC = Buffer * OFL,
            .after = Buffer_from_ratio
        ) |>
        dplyr::rename(
            `Assumed Removals (mt)` = Catch,
            `Stock Status` = status,
            `Spawning Output` = SB,
        )
}

# function to apply gt formatting to the table
format_table <- function(table) {
    table |>
        gt::gt() |>
        gt::fmt_number(
            columns = c(tidyselect::contains("mt"), "OFL", "ABC", "ACL"),
            decimals = 0
        ) |>
        gt::fmt_number(
            columns = tidyselect::contains("Spawning"),
            decimals = spawn_output_decimals
        ) |>
        gt::tab_options(
            table.font.size = 11, # reduced font size
            latex.use_longtable = TRUE
        ) |>
        gt::sub_missing(
            columns = tidyselect::everything(),
            missing_text = "---"
        ) |>
        gt::cols_align(
            align = "center"
        ) |>
        gt::cols_width(
            everything() ~ px(65)
        ) |>
        gt::as_latex()
}

table <- catch_only_projection_table(model,
    all_years = all_years, proj_years = proj_years, catch_years = catch_years
)
table_original <- catch_only_projection_table(model_original,
    all_years = head(all_years, 12), proj_years = proj_years - 2, catch_years = catch_years - 2
)
```

```{r}
#| label: warning-about-buffer
#| echo: false
#| warning: true
#| message: true

if (any(abs(table$Buffer_from_ratio - table$Buffer) > 0.01, na.rm = TRUE)) {
    cli::cli_alert_warning("ACL / OFL differs from buffer calculated by PEPtools::get_buffer() by more than 0.01 for years with status > target. See values below.")
    print(table)
} else {
    table <- dplyr::select(table, -Buffer_from_ratio)
}

if (any(abs(table_original$Buffer_from_ratio - table_original$Buffer) > 0.01, na.rm = TRUE)) {
    cli::cli_alert_warning("ACL / OFL differs from buffer calculated by PEPtools::get_buffer() by more than 0.01 for years with status > target. See values below.")
    print(table_original)
} else {
    table_original <- dplyr::select(table_original, -Buffer_from_ratio)
}

```

```{r}
#| label: tbl-proj
#| echo: false
#| warning: false
#| message: false
#| tbl-cap: "New catch-only projection of OFLs (mt), ABCs (mt), ACLs (mt), buffer, spawning output (trillions of eggs), and stock status given the assumed removals."
format_table(table)
```

```{r}
#| label: tbl-proj-original
#| echo: false
#| warning: false
#| message: false
#| tbl-cap: "Original model projection of OFLs (mt), ABCs (mt), ACLs (mt), buffer, spawning output (trillions of eggs), and stock status given the assumed removals."
format_table(table_original)
```